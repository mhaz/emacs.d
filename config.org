#+STARTUP: overview
* repos
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+end_src

* Aesthetics
** Disable menus and scrollbars
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Theme and font
TODO: Change the color of the code blocks in Org Mode.
  #+begin_src emacs-lisp
    ;; (load-theme 'modus-operandi)
    (load-theme 'modus-vivendi)
    (define-key global-map (kbd "<C-f11>") #'modus-themes-toggle)

    (set-face-attribute 'default nil
                        :family "Iosevka"
                        :height 110
                        :weight 'regular
                        :width 'normal)
  #+end_src

** Increase space between lines
#+begin_src emacs-lisp
  (setq-default line-spacing 6)
#+end_src

** cursor location (line, column)
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Highlight current line
#+begin_src emacs-lisp
  ;; Doesn't work as intended, probably because Emacs start as a daemon.
  ;; (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
  (add-hook 'prog-mode-hook 'hl-line-mode)
#+end_src

* Better defaults
** Disable bell
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Set UTF-8 encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Change titlebar to current file path
#+begin_src emacs-lisp
  (setq frame-title-format
        '((buffer-file-name "%f" (dired-directory dired-directory "%b"))))
#+end_src

** Change yes-or-no questions into y-or-n questions
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Delete mode
Delete selected text when I start typing over it (default behavior in most GUIs)
#+begin_src emacs-lisp
  (delete-selection-mode 1)
#+end_src

** Show parens
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** Delete trailing whitespaces on save
Source: https://www.emacswiki.org/emacs/DeletingWhitespace
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Fuzzy search with isearch (white space matching)
From "Emacs micro motion and hacks" by Protesilaos Stavrou
#+begin_src emacs-lisp
  (setq search-whitespace-regexp ".*")
  (setq isearch-lax-whitespace t)
  (setq isearch-rexexp-lax-whitespace nil)
  #+end_src

** Don't use tabs
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  #+end_src

** Smooth scrolling
Source: https://www.reddit.com/r/emacs/comments/41vicb/emacs_os_x_smooth_scroll/
https://www.reddit.com/r/emacs/comments/3kgv75/why_is_smooth_scrolling_so_slow/
#+begin_src emacs-lisp
  (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering
  (setq mouse-wheel-scroll-amount '(1)) ;; mouse scroll moves 1 line at a time, instead of 5 lines
  ;; (setq mouse-wheel-progressive-speed nil) ;; on a long mouse scroll keep scrolling by 1 lin
  (setq mouse-wheel-progressive-speed t)
#+end_src

** Keybindings
*** Visiting the configuration
Quickly edit =~/.emacs.d/config.org=
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

*** Reloading the configuration
Simply pressing =Control-c r= will reload this file, very handy.
You can also manually invoke =config-reload=.
#+begin_src emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

** Jump to matching pair
#+begin_src emacs-lisp
  (defun is-char-after-in-opening-brace ()
    (member (char-after) '(?\( ?\[ ?\{)))

  (defun is-char-before-in-closing-brace ()
    (member (char-before) '(?\) ?\] ?\})))

  (defun jump-to-matching-pair ()
    (interactive)
    (cond ((is-char-after-in-opening-brace)  (forward-sexp))
          ((is-char-before-in-closing-brace) (backward-sexp))
          (t (error "No matching pair found"))))

  (global-set-key (kbd "C-c j") 'jump-to-matching-pair)
#+end_src

** Emacs temporary files
Source: https://www.emacswiki.org/emacs/AutoSave#toc1
#+begin_src emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src

* Convenient packages
** Undo
Increase the kill ring size, default is 60.
#+begin_src emacs-lisp
  (setq kill-ring-max 100)
#+end_src

*** Undo Tree
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (setq undo-tree-visualizer-timestamps nil
          undo-tree-visualizer-diff t)

    (global-undo-tree-mode))
#+end_src

*** popup-kill-ring
#+begin_src emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src

** Editing with sudo
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src

* Org Mode
** Conventional keybindings
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (define-key global-map "\C-c l" 'org-store-link)
  (define-key global-map "\C-c a" 'org-agenda)
  (setq org-log-done t)
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC

** Common settings
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-hide-emphasis-markers t)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))
#+END_SRC

** Todo keywords and triggers
Logging
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
  (setq org-log-done 'time)
#+END_SRC

* Dired
** Make dired file sizes human readable.
#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

** Move to trash
#+begin_src emacs-lisp
  (setq dired-move-to-trash t)
#+end_src

** Async
#+begin_src emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+end_src

* Denote
#+begin_src emacs-lisp
  (use-package denote
    :ensure t)
#+end_src

* Editing / Text manipulation
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src

* Langtool
https://www.languagetool.org/
https://github.com/mhayashi1120/Emacs-langtool
#+begin_quote
Install LanguageTool version 3.0 or later (and java) http://www.languagetool.org/
#+end_quote

sudo pacman -S jdk-openjdk
sudo pacman -S languagetool
#+begin_src emacs-lisp
  ;;   (setq langtool-language-tool-jar "~/.local/share/LanguageTool-4.4/languagetool-commandline.jar")
  ;;   (require 'langtool)
#+end_src

#+begin_quote
Alternatively, you can set the classpath where LanguageTool's jars reside
#+end_quote
This may be better practice than using the file I manually downloaded and extracted?

Inspired from https://github.com/gicmo/dot-emacs/blob/master/init.el

#+begin_src emacs-lisp
  (use-package langtool
    :ensure t
    :bind (("C-x c w" . langtool-check)
           ("C-x c W" . langtool-check-done)
           ("C-x c l" . langtool-switch-default-language)
           ("C-x c 4" . langtool-show-message-at-point)
           ("C-x c c" . langtool-correct-buffer))
    :config
    (setq ;langtool-language-tool-jar (car (ck-find-langtool))
     langtool-java-classpath
     "/usr/share/languagetool:/usr/share/java/languagetool/*"
     langtool-default-language "en-US"
     langtool-disabled-rules '("WHITESPACE_RULE"
                               "EN_UNPAIRED_BRACKETS"
                               "COMMA_PARENTHESIS_WHITESPACE"
                               "EN_QUOTES")))

  ;;report by popup
  ;; (defun langtool-autoshow-detail-popup (overlays)
  ;;   (when (require 'popup nil t)
  ;;     ;; Do not interrupt current popup
  ;;     (unless (or popup-instances
  ;;                 ;; suppress popup after type `C-g` .
  ;;                 (memq last-command '(keyboard-quit)))
  ;;       (let ((msg (langtool-details-error-message overlays)))
  ;;         (popup-tip msg)))))
  ;; (setq langtool-autoshow-message-function
  ;;       'langtool-autoshow-detail-popup)
#+end_src

* Git
** Magit
Source: https://qiita.com/ignorant/items/86d353e3ada299f12836
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :init
    :bind ("C-x g" . magit-status))
#+end_src

** git gutter
#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't))
#+end_src

** git time machine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+end_src
.
