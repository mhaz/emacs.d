#+STARTUP: overview
* Resources
** General
http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org
https://lupan.pl/dotemacs/
** org mode
http://www.i3s.unice.fr/~malapert/org/tips/emacs_orgmode.html
** C and C++
https://trivialfis.github.io/emacs/2017/08/02/C-C++-Development-Environment-on-Emacs.html
https://tuhdo.github.io/c-ide.html
https://gist.github.com/nilsdeppe/7645c096d93b005458d97d6874a91ea
http://martinsosic.com/development/emacs/2017/12/09/emacs-cpp-ide.html
* repos
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
#+END_SRC

* Theme
** Default theme to load
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'moe-theme)
      (package-refresh-contents)
      (package-install 'moe-theme))
    (load-theme 'moe-dark t)
  #+END_SRC

** day night toggle
https://kylewm.com/2014/01/emacs-toggle-light-and-dark-themes
#+BEGIN_SRC emacs-lisp
  (defcustom default-light-color-theme 'moe-light
    "default light theme")

  (defcustom default-dark-color-theme 'moe-dark
    "default dark theme")

  (defun toggle-dark-light-theme ()
    (interactive)

    (let ((is-light (find default-light-color-theme custom-enabled-themes)))
      (dolist (theme custom-enabled-themes)
        (disable-theme theme))
      (load-theme (if is-light default-dark-color-theme default-light-color-theme))))

  (global-set-key (kbd "<C-f11>") 'toggle-dark-light-theme)
#+END_SRC

* "better defaults"
** Looks
*** Disable menus and scrollbars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

*** cursor location (line, column)
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

*** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

*** Increase space between lines
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 6)
#+END_SRC

*** Change the default font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
                      ;; :family "DejaVu Sans Mono"
                      ;; :family "Source Code Pro"
                      :family "Iosevka SS04"
                      ;; :family "Iosevka SS07"
                      :height 100
                      ;; :weight 'medium
                      :weight 'regular
                      :width 'normal)
#+END_SRC

** Smooth scrolling
*** Better defaults
Source: https://www.reddit.com/r/emacs/comments/41vicb/emacs_os_x_smooth_scroll/
https://www.reddit.com/r/emacs/comments/3kgv75/why_is_smooth_scrolling_so_slow/
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 101) ;; move minimum when cursor exits view, instead of recentering
  (setq mouse-wheel-scroll-amount '(1)) ;; mouse scroll moves 1 line at a time, instead of 5 lines
;;  (setq mouse-wheel-progressive-speed nil) ;; on a long mouse scroll keep scrolling by 1 lin
  (setq mouse-wheel-progressive-speed t)
#+END_SRC

** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Delete mode
Delete selected text when I start typing over it (default behavior in most GUIs)
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Delete trailing whitespaces on save
Source: https://www.emacswiki.org/emacs/DeletingWhitespace
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Keybindings
*** Visiting the configuration
Quickly edit =~/.emacs.d/config.org=
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

*** Reloading the configuration
Simply pressing =Control-c r= will reload this file, very handy.
You can also manually invoke =config-reload=.
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

*** Mouse wheel stuff
Source: https://www.reddit.com/r/emacs/comments/aby59t/make_mouse_wheel_behave_in_emacs_like_in_firefox/
Source: https://github.com/marcowahl/.emacs.d#enable-more-mouse-wheel
**** enable more mouse-wheel
control+wheel for zooming the text.
#+BEGIN_SRC emacs-lisp
  (global-set-key [(control mouse-4)] (lambda () (interactive) (text-scale-increase 1)))
  (global-set-key [(control mouse-5)] (lambda () (interactive) (text-scale-decrease 1)))
#+END_SRC

**** mouse wheel for pdf-view-mode
#+BEGIN_SRC emacs-lisp
  (add-hook
   'pdf-view-mode-hook
   (lambda ()
     (local-set-key [mouse-4] #'pdf-view-previous-line-or-previous-page)
     (local-set-key [mouse-5] #'pdf-view-next-line-or-next-page)
     (local-set-key [(control mouse-4)] (lambda () (interactive) (pdf-view-enlarge 1.25)))
     (local-set-key [(control mouse-5)] (lambda () (interactive) (pdf-view-enlarge 0.8)))))
#+END_SRC

**** mouse wheel for image-mode
#+BEGIN_SRC emacs-lisp
  (add-hook
   'image-mode-hook
   (lambda ()
     (local-set-key [mouse-4] (lambda () (interactive) (image-previous-line 1)))
     (local-set-key [mouse-5] (lambda () (interactive) (image-next-line 1)))
     (local-set-key [(control mouse-4)] (lambda () (interactive) (image-increase-size 1)))
     (local-set-key [(control mouse-5)] (lambda () (interactive) (image-decrease-size 1)))))
#+END_SRC

** Emacs temporary files
Source: https://www.emacswiki.org/emacs/AutoSave#toc1
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(concat user-emacs-directory "backups"))))
#+END_SRC

** Show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Change titlebar to current file path
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format
        '((buffer-file-name "%f" (dired-directory dired-directory "%b"))))
#+END_SRC

** Dired
*** Make dired file sizes human readable.
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

*** Move to trash
#+BEGIN_SRC emacs-lisp
  (setq dired-move-to-trash t)
#+END_SRC

*** Add some colors
Source: www.coli.uni-saarland.de/~slemaguer/emacs/main.html
#+BEGIN_SRC emacs-lisp
  (use-package dired-rainbow
    :ensure t
    :defer t
    :init
    (eval-after-load 'dired '(require 'dired-rainbow))

    :config
    (defconst dired-audio-files-extensions
      '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
      "Dired Audio files extensions")
    (dired-rainbow-define audio "#3399ff" dired-audio-files-extensions)

    (defconst dired-video-files-extensions
      '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG" "mp4" "MP4" "ts" "TS" "m2ts"
        "M2TS" "avi" "AVI" "mov" "MOV" "wmv" "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
      "Dired Video files extensions")
    (dired-rainbow-define video "#4455ff" dired-video-files-extensions)

    (dired-rainbow-define html "#449900" ("htm" "html" "xhtml"))
    (dired-rainbow-define xml "DarkGreen" ("xml" "xsd" "xsl" "xslt" "wsdl"))

    (dired-rainbow-define document "#cc5500" ("doc" "docx" "odt" "pdb" "pdf" "ps" "rtf" "djvu"))
    (dired-rainbow-define image "#ff4444" ("jpg" "png" "jpeg" "gif"))

    (dired-rainbow-define sourcefile "#3388ff" ("el" "groovy" "gradle" "py" "c" "cc" "h" "java" "pl" "rb"))

    (dired-rainbow-define executable "#88ccff" ("exe" "msi"))
    (dired-rainbow-define compressed "#aa77aa" ("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define encrypted "LightBlue" ("gpg" "pgp"))

    (dired-rainbow-define-chmod executable-unix "Green" "-.*x.*")

    (dired-rainbow-define log (:inherit default :italic t) ".*\\.log")
    )
#+END_SRC

** Save recent file at regular interval
Save without flooding the minibuffer
source: https://emacs.stackexchange.com/questions/45697/prevent-emacs-from-messaging-when-it-writes-recentf
#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (recentf-mode 1)
  ;; Save recentf at regular intervals
  ;;(run-at-time (current-time) 300 'recentf-save-list)
  ;; from the wiki https://www.emacswiki.org/emacs/RecentFiles

  (run-at-time nil (* 10 60) 'recentf-save-list)

  ;; Exclude the recentf file itself
  (add-to-list 'recentf-exclude
               (expand-file-name "~/.emacs.d/recentf"))

  ;; Exlcude the org-agenda files
  ;; (they flood the recentf because dashboard always checks their content)
  ;;    (add-to-list 'recentf-exclude (org-agenda-files))
  (add-to-list 'recentf-exclude
               (file-expand-wildcards (expand-file-name "~/org/agenda/*")))

  ;; The elpa stuff
  (add-to-list 'recentf-exclude
               (file-expand-wildcards (expand-file-name "~/.emacs.d/elpa/*")))
#+END_SRC

** vlf
handle open very large files
#+BEGIN_SRC emacs-lisp
  (use-package vlf
  :ensure t)
#+END_SRC

** Scroll half page
Source: https://www.emacswiki.org/emacs/HalfScrolling
#+BEGIN_SRC emacs-lisp
  (defun zz-scroll-half-page (direction)
    "Scrolls half page up if `direction' is non-nil, otherwise will scroll half page down."
    (let ((opos (cdr (nth 6 (posn-at-point)))))
      ;; opos = original position line relative to window
      (move-to-window-line nil)  ;; Move cursor to middle line
      (if direction
          (recenter-top-bottom -1)  ;; Current line becomes last
        (recenter-top-bottom 0))  ;; Current line becomes first
      (move-to-window-line opos)))  ;; Restore cursor/point position

  (defun zz-scroll-half-page-down ()
    "Scrolls exactly half page down keeping cursor/point position."
    (interactive)
    (zz-scroll-half-page nil))

  (defun zz-scroll-half-page-up ()
    "Scrolls exactly half page up keeping cursor/point position."
    (interactive)
    (zz-scroll-half-page t))

  (global-set-key (kbd "C-s-n") 'zz-scroll-half-page-down)
  (global-set-key (kbd "C-s-p") 'zz-scroll-half-page-up)
#+END_SRC

* Packages that replace Emacs defaults
** Kill ring
*** Maximum entries on the ring
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC

*** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
  (setq undo-tree-visualizer-timestamps nil
        undo-tree-visualizer-diff t)

    (global-undo-tree-mode))
#+END_SRC

** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

* spell check and language
** ispell and flycheck
ispell requires to install a dictionary
https://joelkuiper.eu/spellcheck_emacs
enable flyspell for text files
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

makes emacs slow because it does a spell check every time I visit a buffer
#+BEGIN_SRC
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1)
                     (flyspell-buffer))))
  ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode -1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook
            (lambda ()
              (flyspell-prog-mode)
              ;; ...
              ))
#+END_SRC

https://unconj.ca/blog/linting-prose-in-emacs.html
(gives an error at startup [2019-06-03 Mon])
#+BEGIN_SRC
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message) line-end))
    :modes (text-mode markdown-mode gfm-mode))
  ;;
  (add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** LanguageTool
#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :ensure t
    )
#+END_SRC

https://www.languagetool.org/
https://github.com/mhayashi1120/Emacs-langtool
#+BEGIN_QUOTE
Install LanguageTool version 3.0 or later (and java) http://www.languagetool.org/
#+END_QUOTE
sudo pacman -S jdk-openjdk
sudo pacman -S languagetool
#+BEGIN_SRC emacs-lisp
  ;;   (setq langtool-language-tool-jar "~/.local/share/LanguageTool-4.4/languagetool-commandline.jar")
  ;;   (require 'langtool)
#+END_SRC

#+BEGIN_QUOTE
Alternatively, you can set the classpath where LanguageTool's jars reside
#+END_QUOTE
This may be better practice than using the file I manually downloaded and extracted?

Inspired from https://github.com/gicmo/dot-emacs/blob/master/init.el
#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :bind (("C-x c w" . langtool-check)
           ("C-x c W" . langtool-check-done)
           ("C-x c l" . langtool-switch-default-language)
           ("C-x c 4" . langtool-show-message-at-point)
           ("C-x c c" . langtool-correct-buffer))
    :config
    (setq ;langtool-language-tool-jar (car (ck-find-langtool))
     langtool-java-classpath
     "/usr/share/languagetool:/usr/share/java/languagetool/*"
     langtool-default-language "en-US"
     langtool-disabled-rules '("WHITESPACE_RULE"
                               "EN_UNPAIRED_BRACKETS"
                               "COMMA_PARENTHESIS_WHITESPACE"
                               "EN_QUOTES")))
#+END_SRC

report by popup
#+BEGIN_SRC emacs-lisp
  (defun langtool-autoshow-detail-popup (overlays)
    (when (require 'popup nil t)
      ;; Do not interrupt current popup
      (unless (or popup-instances
                  ;; suppress popup after type `C-g` .
                  (memq last-command '(keyboard-quit)))
        (let ((msg (langtool-details-error-message overlays)))
          (popup-tip msg)))))
  (setq langtool-autoshow-message-function
        'langtool-autoshow-detail-popup)
#+END_SRC

* Orgmode
** Conventional keybindings
#+BEGIN_SRC emacs-lisp
  (require 'org)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC

** Common settings
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
  (setq org-hide-emphasis-markers t)
#+END_SRC

** Reasonable sized org-levels
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   )
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))
#+END_SRC

** Todo keywords and triggers
Logging
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
  (setq org-log-done 'time)
#+END_SRC

https://github.com/kandread/doom-emacs-private/blob/master/%2Bgtd.el
#+BEGIN_SRC emacs-lisp
  ;; set task states
  (setq org-todo-keywords
        (quote ((sequence "TODO(t!)" "IN-PROGRESS(p!)" "|" "DONE(d!)")
                (sequence "WAITING(w@/!)" "|" "SOMEDAY(o!)" "CANCELLED(c@/!)"))))
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "#cc6666" :weight bold)
                ("IN-PROGRESS" :foreground "#88bbbb" :weight bold)
                ("DONE" :foreground "#bbbb66" :weight bold)
                ("WAITING" :foreground "#dd9955" :weight bold)
                ("SOMEDAY" :foreground "#bb99bb" :weight bold)
                ("CANCELLED" :foreground "#ffcc77" :weight bold))))
  ;; trigger task states
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                (done ("WAITING"))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("IN-PROGRESS" ("WAITING") ("CANCELLED"))
                ("DONE" ("WAITING") ("CANCELLED")))))
#+END_SRC

** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Easier entry of source blocks
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
- el  --> emacs-lisp
- py  --> python
- tex --> latex
- bib --> bibtex
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (add-to-list 'org-structure-template-alist
               '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))

  (add-to-list 'org-structure-template-alist
               '("tex" "#+BEGIN_SRC Latex\n?\n#+END_SRC"))

  (add-to-list 'org-structure-template-alist
               '("bib" "#+BEGIN_SRC bibtex\n?\n#+END_SRC"))
#+END_SRC

** Org-agenda
All the files in ~/org/agenda
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(org-directory "~/org/agenda")
   '(org-agenda-files (list org-directory)))
#+END_SRC

** Org capture templates
http://www.howardism.org/Technical/Emacs/getting-boxes-done.html
http://www.howardism.org/Technical/Emacs/getting-more-boxes-done.html
http://www.howardism.org/Technical/Emacs/getting-even-more-boxes-done.html
https://www.reddit.com/r/emacs/comments/8kz8dv/tip_how_i_use_orgjournal_to_improve_my/
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
        '(
          ;; JOURNALING
          ;;From http://www.howardism.org/Technical/Emacs/journaling-org.html
          ("j" "Journal Entry"
           entry (file+datetree "~/org/journal.org")
           "* %U %?"
           :empty-lines 1)
          ;; GETTING THINGS DONE
          ;;Source: https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html
          ;;http://d.hatena.ne.jp/tamura70/20100215/org
          ("t" "Todo [inbox]" entry
           (file+headline "~/org/agenda/inbox.org" "Tasks")
           "* TODO %i%?")
          ("T" "Tickler" entry
           (file+headline "~/org/agenda/tickler.org" "Tickler")
           "* %i%? \n %U")
          ;; ... other templates
          ("b" "Bibtex Entry" entry
           (file+headline "~/org/new_bibtex.org" "Bibliography")
           "* %? \n\n*** Link \n\n*** Comments \n\n*** Bibtex \n\n<bib")
          ))
#+END_SRC

** org babel
#+BEGIN_SRC emacs-lisp
  (use-package ob-ipython
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (R . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (haskell . nil)
     (latex . t)
     (ledger . t)
     ;;(ocaml . nil)
     (octave . t)
     (python . t)
     (ipython . t)
     ;; (sh . t)
     (shell . t)
     ;; Include other languages here...
     ))
#+END_SRC

Inline plot
https://emacs.stackexchange.com/questions/44516/orgmode-ipython-output-image-not-show-in-results
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

** GTD
http://www.brool.com/post/using-org-mode-with-gtd/
#+BEGIN_SRC emacs-lisp
  (setq org-refile-targets '(("~/org/agenda/gtd.org" :maxlevel . 3)
                             ("~/org/agenda/someday.org" :level . 1)
                             ("~/org/agenda/tickler.org" :maxlevel . 2)))
#+END_SRC

** Exporting options
*** Syntax highlighting for documents exported to HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

*** latex
#+BEGIN_SRC emacs-lisp
  (when (file-directory-p "/usr/share/emacs/site-lisp/tex-utils")
    (add-to-list 'load-path "/usr/share/emacs/site-lisp/tex-utils")
    (require 'xdvi-search))
#+END_SRC

*** Latex Beamer
https://orgmode.org/worg/exporters/beamer/ox-beamer.html
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+END_SRC

*** Twitter Bootstrap
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

*** Reveal.js
Source: https://cestlaz.github.io/posts/using-emacs-11-reveal/
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t)
  (load-library "ox-reveal")
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)
#+END_SRC

* Interface
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :defer nil
    :init
    (add-hook 'after-init-hook 'dashboard-refresh-buffer)
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (agenda   . 5)))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC

show agenda for the upcoming seven days
#+BEGIN_SRC emacs-lisp
  (setq show-week-agenda-p t)
#+END_SRC

** Editing with sudo
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind
    ("s-e" . sudo-edit))
#+END_SRC

** windows, panes
*** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

*** Following window splits
Source: Uncle dave
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

*** Turn list-buffers into ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** Turn switch-to-buffer into ido-switch-buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'ido-switch-buffer)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** Resize windows
https://www.emacswiki.org/emacs/WindowResize
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-H-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-H-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-H-<down>") 'shrink-window)
  (global-set-key (kbd "C-H-<up>") 'enlarge-window)
#+END_SRC

** Move windows
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-x <left>") 'windmove-left)
#+END_SRC

** Terminal
Source: https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org#the-terminal
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (global-set-key  (kbd "<H-return>") 'ansi-term)
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

** color-identifiers-mode
Source: https://writequit.org/org/settings.html
#+BEGIN_SRC emacs-lisp
  (use-package color-identifiers-mode
    :ensure t)
#+END_SRC

** Buffer move
https://www.reddit.com/r/emacs/comments/299jdj/how_can_i_move_windows_around/cij51m2
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t)

  (global-set-key (kbd "H-b") 'windmove-left)
  (global-set-key (kbd "H-n") 'windmove-down)
  (global-set-key (kbd "H-p") 'windmove-up)
  (global-set-key (kbd "H-f") 'windmove-right)

  (global-set-key (kbd "H-S-b") 'shrink-window-horizontally)
  (global-set-key (kbd "H-S-f") 'enlarge-window-horizontally)
  (global-set-key (kbd "H-S-n") 'shrink-window)
  (global-set-key (kbd "H-S-p") 'enlarge-window)

  (autoload 'buf-move-left "buffer-move" nil t)
  (autoload 'buf-move-down "buffer-move" nil t)
  (autoload 'buf-move-up "buffer-move" nil t)
  (autoload 'buf-move-right "buffer-move" nil t)

  (global-set-key (kbd "H-M-b") 'buf-move-left)
  (global-set-key (kbd "H-M-n") 'buf-move-down)
  (global-set-key (kbd "H-M-p") 'buf-move-up)
  (global-set-key (kbd "H-M-f") 'buf-move-right)
#+END_SRC

** terminal
https://archive.rebeccablacktech.com/g/thread/71228675/#71231172
#+BEGIN_SRC emacs-lisp
  (defun ansi-term-new-window ()
    (interactive)
    (let ((buff (ansi-term "/bin/bash")))
      (switch-to-buffer (other-buffer buff))
      (switch-to-buffer-other-window buff)))

  (define-key global-map (kbd "H-<return>") 'ansi-term-new-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun open-term-in-new-frame ()
    (interactive)
    (let ((name (generate-new-buffer-name "*ansi-term*")))
      (switch-to-buffer-other-frame name)
      (ansi-term "bash" name)))
  ;(define-key global-map (kbd "H-<return>") 'open-term-in-new-frame)
#+END_SRC

* Text manipulation
** multiple-cursors
https://github.com/magnars/multiple-cursors.el

- Select a word, for example with =expand-region=
- =C-M->= and =C-M-<= to select next / previous occurence of the word
- start typing
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    )
  ;; When you have an active region that spans multiple lines, the following will add a cursor to each line:
  ;;(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C-c m c") 'mc/edit-lines)
  ;; When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

  (global-set-key (kbd "C-M->") 'mc/mark-next-word-like-this)
  (global-set-key (kbd "C-M-<") 'mc/mark-previous-word-like-this)

  (global-set-key (kbd "C-c m p") 'mc/mark-pop)
#+END_SRC

Source:
https://stackoverflow.com/questions/39882624/setting-arbitrary-cursor-positions-with-multiple-cursors-in-emacs
Mark cursor location with the mouse
- Mark the location with Control shift mouse, then start typing
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
#+END_SRC

Source:
https://stackoverflow.com/questions/39882624/setting-arbitrary-cursor-positions-with-multiple-cursors-in-emacs
- =C-S-SPC= to mark a new location for multiple-cursors
- After the cursors are set up, =C-S-return= to enable multiple cursors at the previously marked locations *and* the current cursor location
#+BEGIN_SRC emacs-lisp
  (defun mc/toggle-cursor-at-point ()
    "Add or remove a cursor at point."
    (interactive)
    (if multiple-cursors-mode
        (message "Cannot toggle cursor at point while `multiple-cursors-mode' is active.")
      (let ((existing (mc/fake-cursor-at-point)))
        (if existing
            (mc/remove-fake-cursor existing)
          (mc/create-fake-cursor-at-point)))))

  (add-to-list 'mc/cmds-to-run-once 'mc/toggle-cursor-at-point)
  (add-to-list 'mc/cmds-to-run-once 'multiple-cursors-mode)

  (global-set-key (kbd "C-S-SPC") 'mc/toggle-cursor-at-point)
  (global-set-key (kbd "<C-S-return>") 'multiple-cursors-mode)
#+END_SRC

** Mark-Multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC

** iedit
#+BEGIN_SRC emacs-lisp
  ;; mark and edit all copies of the marked region simultaniously.
  (use-package iedit
    :ensure t
    :bind ("C-;" . iedit-mode))

  ;; if you're windened, narrow to the region, if you're narrowed, widen
  ;; bound to C-x n
  (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
   Intelligently means: region, org-src-block, org-subtree, or defun,
   whichever applies first.
   Narrowing to org-src-block actually calls `org-edit-src-code'.

   With prefix P, don't widen, just narrow even if buffer is already
   narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
#+END_SRC

https://www.masteringemacs.org/article/iedit-interactive-multi-occurrence-editing-in-your-buffer
#+BEGIN_SRC emacs-lisp
  (defun iedit-dwim (arg)
    "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
    (interactive "P")
    (if arg
        (iedit-mode)
      (save-excursion
        (save-restriction
          (widen)
          ;; this function determines the scope of `iedit-start'.
          (if iedit-mode
              (iedit-done)
            ;; `current-word' can of course be replaced by other
            ;; functions.
            (narrow-to-defun)
            (iedit-start (current-word) (point-min) (point-max)))))))

  (global-set-key (kbd "C-c ;") 'iedit-dwim)
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Zapping to char
Source: https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org#zapping-to-char
kills all text between your cursor and a selected character.
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-to-char))
#+END_SRC

* Movements and completions
** Swiper
#+BEGIN_SRC emacs-lisp
  ;; requirements
  (use-package counsel
    :ensure t
    )
  (use-package ivy
    :ensure t
    )
  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    )
#+END_SRC

** Phi search
A replacement for the default search
Remap to Hyper (easy access for macros, multiple cursors)
#+BEGIN_SRC emacs-lisp
  (use-package phi-search
    :ensure t
    )
  (global-set-key (kbd "H-s") 'phi-search)
  (global-set-key (kbd "H-r") 'phi-search-backward)
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-c" . avy-goto-char)
    ("M-s" . avy-goto-symbol-1)
    )
#+END_SRC

** helm
http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (setq helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
          helm-quick-update t ; do not display invisible candidates
          helm-idle-delay 0.01 ; be idle for this many seconds, before updating in delayed sources.
          helm-input-idle-delay 0.01 ; be idle for this many seconds, before updating candidate buffer
          helm-show-completion-display-function #'helm-show-completion-default-display-function
          helm-split-window-default-side 'below ;; open helm buffer in another window
          helm-split-window-inside-p t ;; open helm buffer inside current window, not occupy whole other window
          helm-candidate-number-limit 200 ; limit the number of displayed canidates
          helm-move-to-line-cycle-in-source nil ; move to end or beginning of source when reaching top or bottom of source.
          )
    )
#+END_SRC

Remap TAB for completion
Some keybindings
Source: https://emacs.stackexchange.com/questions/33727/how-does-spacemacs-allow-tab-completion-in-helm#38235
https://writequit.org/denver-emacs/presentations/2016-03-01-helm.html
#+BEGIN_SRC
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
;; make TAB works in terminal, C-i is tha same as TAB
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)

  (global-set-key (kbd "C-x b") #'helm-buffers-list)
  ;; (global-set-key (kbd "C-x r b") #'helm-bookmarks)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "M-y") #'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
#+END_SRC

** ido mode
Source: https://www.masteringemacs.org/article/introduction-to-ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

ido-vertical mode
Source: https://github.com/daedreth/UncleDavesEmacs/blob/24e8c1f3d868a3b8178e82fa71e1c3c979a2ea73/config.org#ido-vertical-mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

* Filetype
** Config and log files
*** Default unix configuration
Config-general-mode is applied for all unix configuration files.
#+BEGIN_SRC emacs-lisp
  (use-package config-general-mode
    :ensure t
    :mode ("\\.conf$" "\\.*rc$"))
#+END_SRC

*** CSV
Source http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :ensure t
    :defer t
    :config

    ;; Define separators
    (setq csv-separators '("," ";" ":" " ")))

  ;; Subpackages
  (use-package csv-nav
    :ensure t
    :disabled t)
#+END_SRC

*** logview
#+BEGIN_SRC emacs-lisp
  (use-package logview
    :ensure t
    :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'"))
#+END_SRC

*** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (".yaml$"))

  (use-package yaml-tomato
    :ensure t)
#+END_SRC

*** vimrc
#+BEGIN_SRC emacs-lisp
  (use-package vimrc-mode
    :ensure t
    :mode ("^\\.vimrc\\'"))
#+END_SRC

*** CSS
#+BEGIN_SRC emacs-lisp
  (use-package scss
    :defer t
    :mode ("\\.scss\\'")
    :config
    (autoload 'scss-mode "scss-mode")
    (setq scss-compile-at-save 'nil))
#+END_SRC

*** Graphviz dot
#+BEGIN_SRC emacs-lisp
  (use-package graphviz-dot-mode
    :ensure t
    :init
    (defvar default-tab-width nil)
    :mode ("\\.dot\\'"))
#+END_SRC

*** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :mode (".json"))
#+END_SRC

*** assembly
#+BEGIN_SRC emacs-lisp
  (use-package asm-mode
  :mode ("\\.s\\'"))
#+END_SRC

*** markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (".md" ".markdown"))
#+END_SRC

* Programming
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    (yas-global-mode 1)
    )

  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
  (define-key yas-minor-mode-map (kbd "<H-SPC>") 'yas-expand)
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  ;; Inactive timestamp bound to C-c ! !
  ;; https://stackoverflow.com/questions/32237010/create-inactive-timestamp-keyboard-shortcut-not-working
  (define-key flycheck-mode-map (kbd "C-c ! !") 'org-time-stamp-inactive)
#+END_SRC

Prevent Flycheck from hijacking C-;
#+BEGIN_SRC emacs-lisp
  (define-key flycheck-mode-map (kbd "C-;") nil)
  (define-key flycheck-mode-map (kbd "C-c !") nil)
#+END_SRC

** company mode
#+BEGIN_SRC emacs-lisp
  ;; (require 'company)
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    (setq company-selection-wrap-around t))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** gtags
https://www.emacswiki.org/emacs/GnuGlobal
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    )

  (defun gtags-root-dir ()
    "Returns GTAGS root directory or nil if doesn't exist."
    (with-temp-buffer
      (if (zerop (call-process "global" nil t nil "-pr"))
          (buffer-substring (point-min) (1- (point-max)))
        nil)))

  (defun gtags-update ()
    "Make GTAGS incremental update"
    (call-process "global" nil nil nil "-u"))

  (defun gtags-update-hook ()
    (when (gtags-root-dir)
      (gtags-update)))

  (add-hook 'after-save-hook #'gtags-update-hook)
#+END_SRC

** specific languages
*** c/c++
**** quickly switching between header and implementation
Source: https://emacs-fu.blogspot.com/2008/12/quickly-switching-between-header-and.html
A trivial yet useful trick: when coding C/C++, you often jump from header file (.h, .hh etc.) to implementation file (.c, .cc etc.). Emacs has built-in support for this, using ff-find-other-file. We can add a key binding to .emacs:

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda()
              (local-set-key  (kbd "C-c o") 'ff-find-other-file)))
#+END_SRC

**** CC mode configuration
#+BEGIN_SRC emacs-lisp
  ;; K&R indenting style
  (setq c-default-style "k&r"
        c-basic-offset 2)

  ;;disable electric indentation
  (setq-default c-electric-flag nil)

  ;; Always use "inline" comment style instead of "block" comment style.
  ;; (add-hook 'c-mode-common-hook '(lambda () (c-toggle-comment-style -1)))
  (add-hook 'c-mode-hook '(lambda () (c-toggle-comment-style -1)))
#+END_SRC

**** Google style
https://gist.github.com/nilsdeppe/7645c096d93b005458d97d6874a91ea9
#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :ensure t
    :config
    ;; This prevents the extra two spaces in a namespace that Emacs
    ;; otherwise wants to put.
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    ;; Autoindent using google style guide
    (add-hook 'c-mode-common-hook 'google-make-newline-indent)
    )
#+END_SRC

**** C-make
Source: https://gist.github.com/nilsdeppe/7645c096d93b005458d97d6874a91ea9
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode
  :ensure t
  :mode ("CMakeLists.txt" ".cmake")
  :hook (cmake-mode . (lambda ()
                        (add-to-list 'company-backends 'company-cmake)))
  :config
  (use-package cmake-font-lock
    :ensure t
    :defer t
    :commands (cmake-font-lock-activate)
    :hook (cmake-mode . (lambda ()
                          (cmake-font-lock-activate)
                          (font-lock-add-keywords
                           nil '(("\\<\\(FIXME\\|TODO\\|BUG\\|DONE\\)"
                                  1 font-lock-warning-face t)))
                          ))
    )
)
#+END_SRC

**** C-ide
https://wikemacs.org/wiki/C-ide
Installed GNU global from the AUR
#+BEGIN_SRC emacs-lisp
  ;; (moved to its own subsection)
  ;; (use-package ggtags
  ;;   :ensure t
  ;;   )

  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                (ggtags-mode 1))))
#+END_SRC

And define some keybinding
#+BEGIN_SRC emacs-lisp
  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

https://github.com/syohex/emacs-counsel-gtags
#+BEGIN_SRC emacs-lisp
  (use-package counsel-gtags
    :ensure t
    )
  (add-hook 'c-mode-hook 'counsel-gtags-mode)
  (add-hook 'c++-mode-hook 'counsel-gtags-mode)

  (with-eval-after-load 'counsel-gtags
    (define-key counsel-gtags-mode-map (kbd "M-t") 'counsel-gtags-find-definition)
    (define-key counsel-gtags-mode-map (kbd "M-r") 'counsel-gtags-find-reference)
    (define-key counsel-gtags-mode-map (kbd "M-m") 'counsel-gtags-find-symbol)
    (define-key counsel-gtags-mode-map (kbd "M-,") 'counsel-gtags-go-backward))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq
   helm-gtags-ignore-case t
   helm-gtags-auto-update t
   helm-gtags-use-input-at-cursor t
   helm-gtags-pulse-at-cursor t
   helm-gtags-prefix-key "\C-cg"
   helm-gtags-suggested-key-mapping t
   )

  ;;(require 'helm-gtags)
    (use-package helm-gtags
      :ensure t
     )
  ;; Enable helm-gtags-mode
  ;; (add-hook 'dired-mode-hook 'helm-gtags-mode)
  ;; (add-hook 'eshell-mode-hook 'helm-gtags-mode)
  (add-hook 'c-mode-hook 'helm-gtags-mode)
  (add-hook 'c++-mode-hook 'helm-gtags-mode)
  (add-hook 'asm-mode-hook 'helm-gtags-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
  (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-select)
  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+END_SRC

#+BEGIN_SRC emacs-lisp
   (setq-local imenu-create-index-function #'ggtags-build-imenu-index)
#+END_SRC

***** Usage: Create the tags
Before using the ggtags or helm-gtags, remember to create a GTAGS database by running the command ggtags-create-tags .

Or run gtags at your project root in terminal:

#+BEGIN_QUOTE
   $ cd /path/to/project/root
   $ gtags
#+END_QUOTE

After this, 3 files are created:

- GTAGS: definition database
- GRTAGS: reference database
- GPATH: path name database

**** yasnippet
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'c++-mode-hook 'yas-minor-mode)
  ;; (add-hook 'c-mode-hook 'yas-minor-mode)
  ;; Above doesn't work for some reasons.
  ;; I'm using it for "everything C related" instead.
  (add-hook 'c-mode-common-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))
#+END_SRC

**** company
Requires libclang to be installed.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
    (add-hook 'c-mode-common-hook 'company-mode))
  (use-package company-c-headers
    :ensure t)
  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
                              company-dabbrev-code
                              company-gtags
                              company-irony))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

***** Notes:
I got the following issue
#+BEGIN_QUOTE
Company: An error occurred in auto-begin
Irony-Mode server error: "irony-server is broken! /home/haz/.emacs.d/irony/bin/irony-server exited with status 127"
#+END_QUOTE

Even though clang was installed (/usr/lib/libclang.so)
I got the following error:
#+BEGIN_QUOTE
$ ./.emacs.d/irony/bin/irony-server
./.emacs.d/irony/bin/irony-server: error while loading shared libraries: libclang.so.7: cannot open shared object file: No such file or directory
#+END_QUOTE

The fix is to =M-x irony-install-server RET=

**** clang-format
From https://github.com/sonatard/clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :ensure t
    )
  (global-set-key (kbd "C-c i") 'clang-format-region)
  (global-set-key (kbd "C-c u") 'clang-format-buffer)
  (setq clang-format-style-option "Google")
#+END_SRC

**** modern c++
Just in case
Source: https://github.com/ludwigpacifici/modern-cpp-font-lock
#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t)

  (add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
#+END_SRC

*** python
**** Global config
Source: www.coli.uni-saarland.de/~slemaguer/emacs/main.html
#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode
    ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)

    :init
    (setq-default indent-tabs-mode nil)

    :config
    (setq python-indent-offset 4)
    )
#+END_SRC

**** Indent with Python with two spaces
From https://code.i-harness.com/en/q/40de17
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'python-mode-hook '(lambda () (setq python-indent 2)))
 (add-hook 'python-mode-hook '(lambda () (setq python-indent 4)))
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'python-mode-hook 'company-mode))
  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-jedi))
  (defun python-mode-company-init ()
    (setq-local company-backends '((company-jedi
                                    company-etags
                                    company-dabbrev-code))))
  (use-package company-jedi
    :ensure t
    :config
    (require 'company)
    (add-hook 'python-mode-hook 'python-mode-company-init))
#+END_SRC

**** ipython notebook (ein)
#+BEGIN_SRC emacs-lisp
  (use-package ein
    :defer t
    :commands ein:notebooklist-open
    :init)
#+END_SRC

**** yapf
google tool to beautify python code
$ pip install yapf
https://github.com/google/yapf/tree/master/plugins
https://github.com/paetzke/py-yapf.el
>M-x py-yapf-buffer RET: Uses the yapf tool to reformat the current buffer.
#+BEGIN_SRC emacs-lisp
  (use-package py-yapf
    :ensure t)
#+END_SRC

Apparently py-yapf loses the killring
#+BEGIN_SRC emacs-lisp
  (use-package yapfify
    :ensure t
    :init
  ;; (add-hook 'python-mode-hook 'yapf-mode)
  )
#+END_SRC

**** Sphinx doctring
Place the cursor on the function definition and type C-c M-d
Source: https://github.com/naiquevin/sphinx-doc.el
#+BEGIN_SRC emacs-lisp
  (use-package sphinx-doc
    :ensure t
    :init
  (add-hook 'python-mode-hook (lambda ()
                                   ;; (require 'sphinx-doc)
                                    (sphinx-doc-mode t)))
  )
#+END_SRC

*** R
Source: www.coli.uni-saarland.de/~slemaguer/emacs/main.html
**** ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t)

  (use-package ess-smart-underscore
    :ensure t
    :after ess)

  (use-package ess-view
    :ensure t
    :after ess)

  (use-package ess-R-data-view
    :ensure t
    :after ess)
#+END_SRC

**** completing
#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :ensure t
  :after company
  :hook (after-init . company-statistics-mode))
#+END_SRC

*** Julia
#+BEGIN_SRC emacs-lisp
  ;; inspired from https://github.com/mgxm/julia-layer/blob/master/packages.el
  ;; https://github.com/cgroll/dot_emacs.d/blob/master/init.el

  (use-package julia-mode
    :defer t
    :commands julia-mode
    :mode ("\\.jl$" . ess-julia-mode)
    )

  (defun julia/init-flycheck-julia ()
    (use-package flycheck-julia
      :defer t
      :init
      (progn
        (setq flycheck-julia-executable julia-executable)
        (flycheck-julia-setup))))
#+END_SRC

*** emacs-lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'company-mode)
  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))
  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC

*** bash
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'yas-minor-mode)
#+END_SRC

**** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'flycheck-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook 'company-mode)
  (defun shell-mode-company-init ()
    (setq-local company-backends '((company-shell
                                    company-shell-env
                                    company-etags
                                    company-dabbrev-code))))
  (use-package company-shell
    :ensure t
    :config
    (require 'company)
    (add-hook 'shell-mode-hook 'shell-mode-company-init))
#+END_SRC

*** Lisp
**** Geiser
#+BEGIN_SRC emacs-lisp
  (use-package geiser
    :ensure t
    :init)
#+END_SRC

**** Scheme
#+BEGIN_SRC emacs-lisp
  (use-package scheme-complete
    :ensure t
    :config
    (autoload 'scheme-get-current-symbol-info "scheme-complete" nil t))
#+END_SRC

*** Matlab / Octave
Open .m files in octave-mode
Source: https://stackoverflow.com/questions/1367747/how-do-i-install-a-matlab-mode-in-gnu-emacs
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (cons
         '("\\.m$" . octave-mode)
         auto-mode-alist))
#+END_SRC

(Note: Read this page: https://www.gnu.org/software/emacs/manual/html_node/octave-mode/Running-Octave-from-Within-Emacs.html)

*** Haskell
Source: https://github.com/patrickt/emacs/blob/master/init.el
https://sritchie.github.io/2011/09/25/haskell-in-emacs/
#+BEGIN_SRC emacs-lisp
  ;; Common Haskell snippets. These take a while to load, so no need to block on startup.
  (use-package haskell-snippets
    :ensure t)

  ;; Haskell is my programming language of choice.
  (use-package haskell-mode
    :ensure t
    :config
    (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)

    ;; hslint on the command line only likes this indentation mode;
    ;; alternatives commented out below.
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
    ;;(add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

    ;; Ignore compiled Haskell files in filename completions
    (add-to-list 'completion-ignored-extensions ".hi")

    ;; I don't go overboard with the symbols but they can be nice.
    (setq haskell-font-lock-symbols 't
          haskell-font-lock-symbols-alist
          '(("\\" . "λ")
            ("<=" . "≤")
            (">=" . "≥")
            ("==" . "≡")
            ;; ("<>" . "♢")
            ("/=" . "≢")
            ;; ("<+>" . "⍚")
            ("undefined" . "⊥")
            ("forall" . "∀")
            ("." "∘" haskell-font-lock-dot-is-not-composition) ; or '◦'
            ))

    :mode ("\\.hs$" . haskell-mode)
    :hook (haskell-mode . my-haskell-mode-hook)
    )

(add-hook 'haskell-mode-hook 'haskell-indent-mode)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)
#+END_SRC

* Git
** Magit
Source: https://qiita.com/ignorant/items/86d353e3ada299f12836
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :init
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-refs-show-commit-count 'all
          magit-log-buffer-file-locked t
          magit-revision-show-gravatars nil
          magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    )
#+END_SRC

** git gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't)
    )
#+END_SRC

** git time machine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC

** gitignore mode
#+BEGIN_SRC emacs-lisp
  (use-package gitignore-mode
    :ensure t)

  (use-package helm-gitignore
    :ensure t)
#+END_SRC

** git config mode
#+BEGIN_SRC emacs-lisp
(use-package gitconfig-mode
  :ensure t)
#+END_SRC

** Helpers for edition
#+BEGIN_SRC emacs-lisp
  (use-package git-commit
    :ensure t
    :defer t)

  (use-package gitattributes-mode
    :ensure t
    :defer t)
#+END_SRC

* Latex
** auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;;; AUCTeX
  (require 'tex-site)
  ;; Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2
  (setq TeX-parse-self t); Enable parse on load.
  (setq TeX-auto-save t); Enable parse on save.
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)
  (add-hook 'TeX-mode-hook 'flyspell-mode); Enable Flyspell mode for TeX modes such as AUCTeX. Highlights all misspelled words.
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode); Enable Flyspell program mode for emacs lisp mode, which highlights all misspelled words in comments and strings.
  (setq ispell-dictionary "english"); Default dictionary. To change do M-x ispell-change-dictionary RET.
  (add-hook 'TeX-mode-hook
            (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
  (setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.
  ;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
  ;; (setq LaTeX-csquotes-close-quote "}"
  ;;       LaTeX-csquotes-open-quote "\\enquote{")
  ;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
  (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

** From http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :defer t
    :after (tex latex)
    :config

    ;; Spelling
    (setq ispell-tex-skip-alists
          '((
             ;;("%\\[" . "%\\]") ; AMStex block comment...
             ;; All the standard LaTeX keywords from L. Lamport's guide:
             ;; \cite, \hspace, \hspace*, \hyphenation, \include, \includeonly
             ;; \input, \label, \nocite, \rule (in ispell - rest included here)
             ("\\\\addcontentsline"              ispell-tex-arg-end 2)
             ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end)
             ("\\\\\\([aA]lph\\|arabic\\)"       ispell-tex-arg-end)
             ("\\\\author"                       ispell-tex-arg-end)
             ;; New regexps here
             ("\\\\\\(text\\|paren\\)cite"           ispell-tex-arg-end)
             ("\\\\cite\\(t\\|p\\|year\\|yearpar\\)" ispell-tex-arg-end)
             ("\\\\bibliographystyle"                ispell-tex-arg-end)
             ("\\\\makebox"                          ispell-tex-arg-end 0)
             ("\\\\e?psfig"                          ispell-tex-arg-end)
             ("\\\\document\\(class\\|style\\)" .
              "\\\\begin[ \t\n]*{[ \t\n]*document[ \t\n]*}"))
            (
             ;; delimited with \begin.  In ispell: displaymath, eqnarray,
             ;; eqnarray*, equation, minipage, picture, tabular,
             ;; tabular* (ispell)
             ("\\(figure\\|table\\)\\*?"      ispell-tex-arg-end 0)
             ("\\(equation\\|eqnarray\\)\\*?" ispell-tex-arg-end 0)
             ("list"                          ispell-tex-arg-end 2)
             ("program" . "\\\\end[ \t\n]*{[ \t\n]*program[ \t\n]*}")
             ("verbatim\\*?"."\\\\end[ \t\n]*{[ \t\n]*verbatim\\*?[ \t\n]*}")
             ("lstlisting\\*?"."\\\\end[ \t\n]*{[ \t\n]*lstlisting\\*?[ \t\n]*}"))))

    ;; Pdf activated by default
    (TeX-global-PDF-mode 1)

    ;; Diverse
    (setq-default TeX-master nil)
    (setq TeX-parse-self t
          TeX-auto-save t)

    ;; Filling
    (add-hook 'LaTeX-mode-hook 'turn-off-auto-fill)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (TeX-fold-mode t)))

    ;; Minor helpers for comment
    (add-to-list 'LaTeX-verbatim-environments "comment")

    ;; Indentation
    (setq LaTeX-indent-level 4
          LaTeX-item-indent 0
          TeX-brace-indent-level 4
          TeX-newline-function 'newline-and-indent)

    ;; Some usefull hooks
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'outline-minor-mode)

    (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
      "Start each sentence on a new line."
      (let ((from (ad-get-arg 0))
            (to-marker (set-marker (make-marker) (ad-get-arg 1)))
            tmp-end)
        (while (< from (marker-position to-marker))
          (forward-sentence)
          ;; might have gone beyond to-marker --- use whichever is smaller:
          (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
          ad-do-it
          (ad-set-arg 0 (setq from (point)))
          (unless (or
                   (bolp)
                   (looking-at "\\s *$"))
            (LaTeX-newline)))
        (set-marker to-marker nil)))
    (ad-activate 'LaTeX-fill-region-as-paragraph)

    ;; PDF/Tex correlation
    (setq TeX-source-correlate-method 'synctex)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)

    ;; Keys
    (define-key LaTeX-mode-map (kbd "C-c C-¥") 'align-current))
#+END_SRC

** evince
https://superuser.com/questions/253525/emacs-auctex-how-do-i-open-the-pdf-in-evince-at-the-current-cursor-position
#+BEGIN_SRC emacs-lisp
  (setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")))
  (setq TeX-view-program-selection '((output-pdf "Evince")))

  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (setq TeX-source-correlate-start-server t)
#+END_SRC

** reftex
#+BEGIN_SRC emacs-lisp
  (use-package reftex
    :ensure t
    :defer t
    :init
    ;; According to the reftex manual
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
    (add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
    :config
    (setq reftex-save-parse-info t
          reftex-enable-partial-scans t
          reftex-use-multiple-selection-buffers t
          reftex-plug-into-AUCTeX t
          reftex-vref-is-default t
          reftex-cite-format
          '((?\C-m . "\\cite[]{%l}")
            (?t . "\\textcite{%l}")
            (?a . "\\autocite[]{%l}")
            (?p . "\\parencite{%l}")
            (?f . "\\footcite[][]{%l}")
            (?F . "\\fullcite[]{%l}")
            (?x . "[]{%l}")
            (?X . "{%l}"))

          font-latex-match-reference-keywords
          '(("cite" "[{")
            ("cites" "[{}]")
            ("footcite" "[{")
            ("footcites" "[{")
            ("parencite" "[{")
            ("textcite" "[{")
            ("fullcite" "[{")
            ("citetitle" "[{")
            ("citetitles" "[{")
            ("headlessfullcite" "[{"))

          reftex-cite-prompt-optional-args t; Prompt for empty optional arguments in ci
          reftex-cite-cleanup-optional-args t))
#+END_SRC

** reftex with cleverref
Source: https://tex.stackexchange.com/questions/119253/cleveref-auctex-and-reftex-set-up
#+BEGIN_SRC emacs-lisp
  (eval-after-load
      "latex"
    '(TeX-add-style-hook
      "cleveref"
      (lambda ()
        (if (boundp 'reftex-ref-style-alist)
            (add-to-list
             'reftex-ref-style-alist
             '("Cleveref" "cleveref"
               (("\\cref" ?c) ("\\Cref" ?C) ("\\cpageref" ?d) ("\\Cpageref" ?D)))))
        (reftex-ref-style-activate "Cleveref")
        (TeX-add-symbols
         '("cref" TeX-arg-ref)
         '("Cref" TeX-arg-ref)
         '("cpageref" TeX-arg-ref)
         '("Cpageref" TeX-arg-ref)))))
#+END_SRC

** bibtex
move to next/previous entry
http://kitchingroup.cheme.cmu.edu/blog/2014/10/13/Navigating-your-bibtex-file/
#+BEGIN_SRC emacs-lisp
  (defun bibtex-next-entry (&optional n)
    "Jump to the beginning of the next bibtex entry. N is a prefix
  argument. If it is numeric, jump that many entries
  forward. Negative numbers do nothing."
    (interactive "P")
    ;; Note if we start at the beginning of an entry, nothing
    ;; happens. We need to move forward a char, and call again.
    (when (= (point) (save-excursion
                       (bibtex-beginning-of-entry)))
      (forward-char)
      (bibtex-next-entry))
    ;; search forward for an entry
    (when
        (re-search-forward bibtex-entry-head nil t (and (numberp n) n))
      ;; go to beginning of the entry
      (bibtex-beginning-of-entry)))
  (defun bibtex-previous-entry (&optional n)
    "Jump to beginning of the previous bibtex entry. N is a prefix
  argument. If it is numeric, jump that many entries back."
    (interactive "P")
    (bibtex-beginning-of-entry)
    (when
        (re-search-backward bibtex-entry-head nil t (and (numberp n) n))
      (bibtex-beginning-of-entry)))
  (defun jmax-bibtex-mode-keys ()
    "Modify keymaps used by `bibtex-mode'."
    (local-set-key (kbd "M-n") 'bibtex-next-entry)
    (local-set-key (kbd "M-p") 'bibtex-previous-entry))
  ;; add to bibtex-mode-hook
  (add-hook 'bibtex-mode-hook 'jmax-bibtex-mode-keys)
  (defun jmax-bibtex-get-fields ()
    "Get a list of fields in a bibtex entry."
    (bibtex-beginning-of-entry)
    (remove "=type="
            (remove "=key="
                    (mapcar 'car (bibtex-parse-entry)))))
  (defun jmax-bibtex-jump-to-field (field)
    "Jump to FIELD in the current bibtex entry"
    (interactive
     (list
      (ido-completing-read "Field: " (jmax-bibtex-get-fields))))
    (save-restriction
      (bibtex-narrow-to-entry)
      (bibtex-beginning-of-entry)
      (when
          ;; fields start with spaces, a field name, possibly more
          ;; spaces, then =
          (re-search-forward (format "^\\s-*%s\\s-*=" field) nil t))))
#+END_SRC

Generate key
Source: http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
#+BEGIN_SRC
(use-package bibtex
  :defer t
  :config
  (defun bibtex-generate-autokey ()
    (let* ((bibtex-autokey-names nil)
           (bibtex-autokey-year-length 2)
           (bibtex-autokey-name-separator "\0")
           (names (split-string (bibtex-autokey-get-names) "\0"))
           (year (bibtex-autokey-get-year))
           (name-char (cond ((= (length names) 1) 4)
                            ((= (length names) 2) 2)
                            (t 1)))
           (existing-keys (bibtex-parse-keys))
           key)
      (setq names (mapconcat (lambda (x)
                               (substring x 0 name-char))
                             names
                             ""))
      (setq key (format "%s%s" names year))
      (let ((ret key))
        (loop for c from ?a to ?z
              while (assoc ret existing-keys)
              do (setq ret (format "%s%c" key c)))
        ret)))
#+END_SRC
key formatting
Source: http://www.coli.uni-saarland.de/~slemaguer/emacs/main.html
Source: http://kitchingroup.cheme.cmu.edu/blog/2014/05/15/Using-org-ref-to-keep-your-bibtex-files-in-order/
#+BEGIN_SRC emacs-lisp
  ;; variables that control bibtex key format for auto-generation
  ;; I want firstauthor-year-title-words
  ;; this usually makes a legitimate filename to store pdfs under.
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 4
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5 ;; nil for an unlimited number of characters per word

        bibtex-autokey-titleword-first-ignore '("the" "a" "if" "and" "an")
  )
#+END_SRC

** preview
#+BEGIN_SRC emacs-lisp
  (use-package latex-math-preview
    :ensure t
    :config
    (autoload 'LaTeX-preview-setup "preview")
    (setq preview-scale-function 1.2)
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup))
#+END_SRC

* Writing
** paper
#+BEGIN_SRC emacs-lisp
  (use-package academic-phrases
    :ensure t)
  #+END_SRC

* reading
** nov.el
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :ensure t
    :mode ("\\.epub\\'" . nov-mode))
#+END_SRC
